// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// schema.prisma

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    seekerProfile   SeekerProfile?
    employerProfile EmployerProfile?

    jobs            Job[]            @relation("EmployerJobs")
    favoriteJobs    FavoriteJob[]    @relation("UserFavoriteJobs")
    favoriteSeekers FavoriteSeeker[] @relation("EmployerFavorites")

    role Role?
}

model SeekerProfile {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    surname     String
    fathername  String
    gender      String
    birthday    DateTime
    phoneNumber String
    email       String

    location        String
    education       String
    resume          String
    wish_job        String
    experienceLevel String

    user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    likedBy FavoriteSeeker[] @relation("LikedSeeker")
}

model EmployerProfile {
    id          String  @id @default(cuid())
    userId      String  @unique
    companyName String
    description String?
    phoneNumber String
    email       String?
    website     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
    id              String   @id @default(cuid())
    title           String
    description     String
    location        String
    salary          Int
    experienceLevel String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    employer   User   @relation("EmployerJobs", fields: [employerId], references: [id], onDelete: Cascade)
    employerId String

    likedBy FavoriteJob[] @relation("LikedJob")
}

model FavoriteJob {
    id     String @id @default(cuid())
    user   User   @relation("UserFavoriteJobs", fields: [userId], references: [id], onDelete: Cascade)
    userId String

    job   Job    @relation("LikedJob", fields: [jobId], references: [id], onDelete: Cascade)
    jobId String

    createdAt DateTime @default(now())

    @@unique([userId, jobId])
}

model FavoriteSeeker {
    id         String @id @default(cuid())
    employer   User   @relation("EmployerFavorites", fields: [employerId], references: [id], onDelete: Cascade)
    employerId String

    seeker   SeekerProfile @relation("LikedSeeker", fields: [seekerId], references: [id], onDelete: Cascade)
    seekerId String

    createdAt DateTime @default(now())

    @@unique([employerId, seekerId])
}

enum Role {
    SEEKER
    EMPLOYER
}
